//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.ComponentModel;
using Soneta.Types;
using Soneta.Business;

[assembly: ModuleType("DodatekTreningowySortowanie", typeof(DodatekTreningowySortowanie.DodatekTreningowySortowanieModule), 4, "DodatekTreningowySortowanie", 4, VersionNumber=1)]

namespace DodatekTreningowySortowanie;

/// <summary>
/// Moduł DodatekTreningowySortowanie.
/// </summary>
/// <seealso cref="Soneta.Business.Module"/>
/// <seealso cref="Soneta.Business.Session"/>
[System.CodeDom.Compiler.GeneratedCode("Soneta.CodeGenerators", "4")]
public partial class DodatekTreningowySortowanieModule : Module {

    public static DodatekTreningowySortowanieModule GetInstance(ISessionable session) => (DodatekTreningowySortowanieModule)session?.Session?.Modules[moduleInfo];

    private static Soneta.Business.App.ModuleInfo moduleInfo = new(session => new DodatekTreningowySortowanieModule(session)) {
    };

    private DodatekTreningowySortowanieModule(Session session) : base(session) {}

    public static readonly Soneta.Business.App.TableInfo SortObiektyTableInfo = new Soneta.Business.App.TableInfo.Create<SortObiekty, SortObiekt, SortObiektRecord>("SortObie") {
        InterfaceNames = new[] {""},
    };

    public SortObiekty SortObiekty => (SortObiekty)Session.Tables[SortObiektyTableInfo];

    private static Soneta.Business.App.KeyInfo keyInfoSortObiektSortPodObiekt = new(SortObiektyTableInfo, table => new SortObiektTable.SortPodObiektRelation(table)) {
        Name = "Relacja pola SortPodObiekt",
        RelationTo = "SortPodObiekt",
        DeleteCascade = true,
        Unique = true,
        KeyFields = ["SortPodObiekt"],
    };

    private static Soneta.Business.App.KeyInfo keyInfoSortObiektWgKod = new(SortObiektyTableInfo, table => new SortObiektTable.WgKodKey(table)) {
        Name = "WgKod",
        Unique = true,
        PrimaryKey = true,
        KeyFields = ["KodObiektu"],
    };

    /// <summary>
    /// Klasa implementująca standardową obsługę tabeli obiektów SortObiekt.
    /// Dziedzicząca klasa <see cref="SortObiekty"/> zawiera kod użytkownika
    /// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
    /// biblioteki <see cref="Soneta.Business"/>.
    /// </summary>
    /// <seealso cref="SortObiekty"/>
    /// <seealso cref="SortObiektRow"/>
    /// <seealso cref="SortObiekt"/>
    /// <seealso cref="Soneta.Business.Table"/>
    [Caption("Tabela do testowania sortowania obiektów")]
    public abstract partial class SortObiektTable : GuidedTable {

        protected SortObiektTable() {}

        public partial class SortPodObiektRelation : Key<SortObiekt> {
            internal SortPodObiektRelation(Table table) : base(table) {
            }

            protected override object[] GetData(Row row, Record rec) => new object[] {
                ((SortObiektRecord)rec).SortPodObiekt
            };

            public SortObiekt this[SortPodObiekt sortpodobiekt] => (SortObiekt)Find(sortpodobiekt);
        }

        public SortPodObiektRelation WgSortPodObiekt => (SortPodObiektRelation)Session.Keys[keyInfoSortObiektSortPodObiekt];

        public partial class WgKodKey : Key<SortObiekt> {
            internal WgKodKey(Table table) : base(table) {
            }

            protected override object[] GetData(Row row, Record rec) => new object[] {
                ((SortObiektRecord)rec).KodObiektu.TrimEnd()
            };

            public SortObiekt this[string kodobiektu] => (SortObiekt)Find(kodobiektu);
        }

        public WgKodKey WgKod => (WgKodKey)Session.Keys[keyInfoSortObiektWgKod];


        /// <summary>
        /// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
        /// innych obiektów znajdujących się w tym samym module.
        /// </summary>
        /// <seealso cref="DodatekTreningowySortowanieModule"/>
        public new DodatekTreningowySortowanieModule Module => (DodatekTreningowySortowanieModule)base.Module;

        public System.Linq.IQueryable<SortObiekt> AsQuery() => AsQuery<SortObiekt>();

        /// <summary>
        /// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
        /// ID identyfikującego jednoznacznie obiekt w systemie.
        /// </summary>
        /// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
        /// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
        /// <seealso cref="SortObiekt"/>
        public new SortObiekt this[int id] => (SortObiekt)base[id];

        /// <summary>
        /// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
        /// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
        /// </summary>
        /// <param name="ids">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
        /// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
        /// <seealso cref="SortObiekt"/>
        public new SortObiekt[] this[int[] ids] => (SortObiekt[])base[ids];

        public new SortObiekt this[Guid guid] => (SortObiekt)base[guid];

        protected override Row CreateRow(RowCreator creator) => new SortObiekt();

        [Soneta.Langs.TranslateIgnore]
        protected override sealed void PrepareNames(StringBuilder names, string divider) {
            names.Append(divider); names.Append("Guid");
            names.Append(divider); names.Append("KodObiektu");
            names.Append(divider); names.Append("NazwaVirtual");
            names.Append(divider); names.Append("CenaValue");
            names.Append(divider); names.Append("CenaSymbol");
            names.Append(divider); names.Append("DataObiektu");
            names.Append(divider); names.Append("Opis");
            names.Append(divider); names.Append("OkresObiektuFrom");
            names.Append(divider); names.Append("OkresObiektuTo");
            names.Append(divider); names.Append("SortPodObiekt");
        }

    }

    public abstract partial class SortObiektRow : GuidedRow {

        private SortObiektRecord record;

        protected override void AssignRecord(Record rec) {
            record = (SortObiektRecord)rec;
        }

        protected SortObiektRow() : base(true) {
        }

        protected override Row PrimaryRow => null;

        [MaxLength(6)]
        [Required]
        public string KodObiektu {
            get {
                if (record==null) GetRecord();
                return record.KodObiektu;
            }
            set {
                SortObiektSchema.KodObiektuBeforeEdit?.Invoke((SortObiekt)this, ref value);
                if (value!=null) value = value.TrimEnd();
                if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "KodObiektu");
                if (value.Length>KodObiektuLength) throw new ValueToLongException(this, "KodObiektu", KodObiektuLength);
                GetEdit(record==null, false);
                record.KodObiektu = value;
                if (State!=RowState.Detached) {
                    ResyncSet(keyInfoSortObiektWgKod);
                }
                SortObiektSchema.KodObiektuAfterEdit?.Invoke((SortObiekt)this);
            }
        }

        public const int KodObiektuLength = 6;

        [MaxLength(80)]
        [Required]
        public virtual string NazwaVirtual {
            get {
                if (record==null) GetRecord();
                return record.NazwaVirtual;
            }
            set {
                SortObiektSchema.NazwaVirtualBeforeEdit?.Invoke((SortObiekt)this, ref value);
                if (value!=null) value = value.TrimEnd();
                if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "NazwaVirtual");
                if (value.Length>NazwaVirtualLength) throw new ValueToLongException(this, "NazwaVirtual", NazwaVirtualLength);
                GetEdit(record==null, false);
                record.NazwaVirtual = value;
                SortObiektSchema.NazwaVirtualAfterEdit?.Invoke((SortObiekt)this);
            }
        }

        public  const int NazwaVirtualLength = 80;

        public Currency Cena {
            get {
                if (record==null) GetRecord();
                return record.Cena;
            }
            set {
                SortObiektSchema.CenaBeforeEdit?.Invoke((SortObiekt)this, ref value);
                GetEdit(record==null, false);
                record.Cena = value;
                SortObiektSchema.CenaAfterEdit?.Invoke((SortObiekt)this);
            }
        }

        public Date DataObiektu {
            get {
                if (record==null) GetRecord();
                return record.DataObiektu;
            }
            set {
                SortObiektSchema.DataObiektuBeforeEdit?.Invoke((SortObiekt)this, ref value);
                GetEdit(record==null, false);
                record.DataObiektu = value;
                SortObiektSchema.DataObiektuAfterEdit?.Invoke((SortObiekt)this);
            }
        }

        [MaxLength(200)]
        public string Opis {
            get {
                if (record==null) GetRecord();
                return record.Opis;
            }
            set {
                SortObiektSchema.OpisBeforeEdit?.Invoke((SortObiekt)this, ref value);
                if (value!=null) value = value.TrimEnd();
                if (value.Length>OpisLength) throw new ValueToLongException(this, "Opis", OpisLength);
                GetEdit(record==null, false);
                record.Opis = value;
                SortObiektSchema.OpisAfterEdit?.Invoke((SortObiekt)this);
            }
        }

        public const int OpisLength = 200;

        public FromTo OkresObiektu {
            get {
                if (record==null) GetRecord();
                return record.OkresObiektu;
            }
            set {
                SortObiektSchema.OkresObiektuBeforeEdit?.Invoke((SortObiekt)this, ref value);
                GetEdit(record==null, false);
                record.OkresObiektu = value;
                SortObiektSchema.OkresObiektuAfterEdit?.Invoke((SortObiekt)this);
            }
        }

        [Category("Ogólne")]
        [Required]
        public SortPodObiekt SortPodObiekt {
            get {
                if (record==null) GetRecord();
                return (SortPodObiekt)GetRowReference(ref record.SortPodObiekt);
            }
            set {
                SortObiektSchema.SortPodObiektBeforeEdit?.Invoke((SortObiekt)this, ref value);
                System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
                GetEdit(record==null, false);
                if (value==null) throw new RequiredException(this, "SortPodObiekt");
                record.SortPodObiekt = value;
                if (State!=RowState.Detached) {
                    ResyncSet(keyInfoSortObiektSortPodObiekt);
                }
                SortObiektSchema.SortPodObiektAfterEdit?.Invoke((SortObiekt)this);
            }
        }

        [ChildTable("SortRelObiekt", "DodatekTreningowySortowanie.SortRelObiekt", "SortObiekt")]
        public SubTable<SortRelObiekt> Relacje => (SubTable<SortRelObiekt>)Table.Module.SortRelObiekty.WgSortObiekt.CreateSubTable(this);

        [Browsable(false)]
        public new SortObiekty Table => (SortObiekty)base.Table;

        [Browsable(false)]
        public DodatekTreningowySortowanieModule Module => Table.Module;

        protected override Soneta.Business.App.TableInfo TableInfo => SortObiektyTableInfo;

        public sealed override AccessRights GetObjectRight() {
            AccessRights ar = CalcObjectRight();
            SortObiektSchema.OnCalcObjectRight?.Invoke((SortObiekt)this, ref ar);
            return ar;
        }

        protected sealed override AccessRights GetParentsObjectRight() {
            AccessRights result = CalcParentsObjectRight();
            SortObiektSchema.OnCalcParentsObjectRight?.Invoke((SortObiekt)this, ref result);
            return result;
        }

        protected override bool CalcReadOnly() {
            bool result = false;
            SortObiektSchema.OnCalcReadOnly?.Invoke((SortObiekt)this, ref result);
            return result;
        }

        class KodObiektuRequiredVerifier : RequiredVerifier {
            internal KodObiektuRequiredVerifier(IRow row) : base(row, "KodObiektu") {
            }
            protected override bool IsValid() => !(string.IsNullOrEmpty(((SortObiektRow)Row).KodObiektu));
        }

        class NazwaVirtualRequiredVerifier : RequiredVerifier {
            internal NazwaVirtualRequiredVerifier(IRow row) : base(row, "NazwaVirtual") {
            }
            protected override bool IsValid() => !(string.IsNullOrEmpty(((SortObiektRow)Row).NazwaVirtual));
        }

        class SortPodObiektRequiredVerifier : RequiredVerifier {
            internal SortPodObiektRequiredVerifier(IRow row) : base(row, "SortPodObiekt") {
            }
            protected override bool IsValid() => ((SortObiektRow)Row).SortPodObiekt!=null;
        }

        protected override void OnAdded() {
            base.OnAdded();
            Session.Verifiers.Add(new KodObiektuRequiredVerifier(this));
            Session.Verifiers.Add(new NazwaVirtualRequiredVerifier(this));
            Session.Verifiers.Add(new SortPodObiektRequiredVerifier(this));
            System.Diagnostics.Debug.Assert(record.SortPodObiekt==null || record.SortPodObiekt.State==RowState.Detached || Session==record.SortPodObiekt.Session);
            SortObiektSchema.OnAdded?.Invoke((SortObiekt)this);
        }

        protected override void OnLoaded() {
            base.OnLoaded();
            SortObiektSchema.OnLoaded?.Invoke((SortObiekt)this);
        }

        protected override void OnEditing() {
            base.OnEditing();
            SortObiektSchema.OnEditing?.Invoke((SortObiekt)this);
        }

        protected override void OnDeleting() {
            base.OnDeleting();
            SortObiektSchema.OnDeleting?.Invoke((SortObiekt)this);
        }

        protected override void OnDeleted() {
            base.OnDeleted();
            SortObiektSchema.OnDeleted?.Invoke((SortObiekt)this);
        }

        protected override void OnRepacked() {
            base.OnRepacked();
            SortObiektSchema.OnRepacked?.Invoke((SortObiekt)this);
        }

    }

    public sealed class SortObiektRecord : GuidedRecord {
        [Required]
        [MaxLength(6)]
        public string KodObiektu = "";
        [Required]
        [MaxLength(80)]
        public string NazwaVirtual = "";
        public Currency Cena;
        public Date DataObiektu;
        [MaxLength(200)]
        public string Opis = "";
        public FromTo OkresObiektu;
        [Required]
        [ParentTable("SortPodObiekt")]
        public IRow SortPodObiekt;

        public override Record Clone() {
            SortObiektRecord rec = (SortObiektRecord)MemberwiseClone();
            return rec;
        }

        public override void Load(RecordReader creator) {
            Guid = creator.Read_guid();
            KodObiektu = creator.Read_string();
            NazwaVirtual = creator.Read_string();
            Cena = creator.Read_currency();
            DataObiektu = creator.Read_date();
            Opis = creator.Read_string();
            OkresObiektu = creator.Read_FromTo();
            SortPodObiekt = creator.Read_Row(SortPodObiektyTableInfo);
        }
    }

    public static class SortObiektSchema {

        internal static RowDelegate<SortObiektRow, string> KodObiektuBeforeEdit;
        public static void AddKodObiektuBeforeEdit(RowDelegate<SortObiektRow, string> value)
        	=> KodObiektuBeforeEdit = (RowDelegate<SortObiektRow, string>)Delegate.Combine(KodObiektuBeforeEdit, value);

        internal static RowDelegate<SortObiektRow> KodObiektuAfterEdit;
        public static void AddKodObiektuAfterEdit(RowDelegate<SortObiektRow> value)
        	=> KodObiektuAfterEdit = (RowDelegate<SortObiektRow>)Delegate.Combine(KodObiektuAfterEdit, value);

        internal static RowDelegate<SortObiektRow, string> NazwaVirtualBeforeEdit;
        public static void AddNazwaVirtualBeforeEdit(RowDelegate<SortObiektRow, string> value)
        	=> NazwaVirtualBeforeEdit = (RowDelegate<SortObiektRow, string>)Delegate.Combine(NazwaVirtualBeforeEdit, value);

        internal static RowDelegate<SortObiektRow> NazwaVirtualAfterEdit;
        public static void AddNazwaVirtualAfterEdit(RowDelegate<SortObiektRow> value)
        	=> NazwaVirtualAfterEdit = (RowDelegate<SortObiektRow>)Delegate.Combine(NazwaVirtualAfterEdit, value);

        internal static RowDelegate<SortObiektRow, Currency> CenaBeforeEdit;
        public static void AddCenaBeforeEdit(RowDelegate<SortObiektRow, Currency> value)
        	=> CenaBeforeEdit = (RowDelegate<SortObiektRow, Currency>)Delegate.Combine(CenaBeforeEdit, value);

        internal static RowDelegate<SortObiektRow> CenaAfterEdit;
        public static void AddCenaAfterEdit(RowDelegate<SortObiektRow> value)
        	=> CenaAfterEdit = (RowDelegate<SortObiektRow>)Delegate.Combine(CenaAfterEdit, value);

        internal static RowDelegate<SortObiektRow, Date> DataObiektuBeforeEdit;
        public static void AddDataObiektuBeforeEdit(RowDelegate<SortObiektRow, Date> value)
        	=> DataObiektuBeforeEdit = (RowDelegate<SortObiektRow, Date>)Delegate.Combine(DataObiektuBeforeEdit, value);

        internal static RowDelegate<SortObiektRow> DataObiektuAfterEdit;
        public static void AddDataObiektuAfterEdit(RowDelegate<SortObiektRow> value)
        	=> DataObiektuAfterEdit = (RowDelegate<SortObiektRow>)Delegate.Combine(DataObiektuAfterEdit, value);

        internal static RowDelegate<SortObiektRow, string> OpisBeforeEdit;
        public static void AddOpisBeforeEdit(RowDelegate<SortObiektRow, string> value)
        	=> OpisBeforeEdit = (RowDelegate<SortObiektRow, string>)Delegate.Combine(OpisBeforeEdit, value);

        internal static RowDelegate<SortObiektRow> OpisAfterEdit;
        public static void AddOpisAfterEdit(RowDelegate<SortObiektRow> value)
        	=> OpisAfterEdit = (RowDelegate<SortObiektRow>)Delegate.Combine(OpisAfterEdit, value);

        internal static RowDelegate<SortObiektRow, FromTo> OkresObiektuBeforeEdit;
        public static void AddOkresObiektuBeforeEdit(RowDelegate<SortObiektRow, FromTo> value)
        	=> OkresObiektuBeforeEdit = (RowDelegate<SortObiektRow, FromTo>)Delegate.Combine(OkresObiektuBeforeEdit, value);

        internal static RowDelegate<SortObiektRow> OkresObiektuAfterEdit;
        public static void AddOkresObiektuAfterEdit(RowDelegate<SortObiektRow> value)
        	=> OkresObiektuAfterEdit = (RowDelegate<SortObiektRow>)Delegate.Combine(OkresObiektuAfterEdit, value);

        internal static RowDelegate<SortObiektRow, SortPodObiekt> SortPodObiektBeforeEdit;
        public static void AddSortPodObiektBeforeEdit(RowDelegate<SortObiektRow, SortPodObiekt> value)
        	=> SortPodObiektBeforeEdit = (RowDelegate<SortObiektRow, SortPodObiekt>)Delegate.Combine(SortPodObiektBeforeEdit, value);

        internal static RowDelegate<SortObiektRow> SortPodObiektAfterEdit;
        public static void AddSortPodObiektAfterEdit(RowDelegate<SortObiektRow> value)
        	=> SortPodObiektAfterEdit = (RowDelegate<SortObiektRow>)Delegate.Combine(SortPodObiektAfterEdit, value);

        internal static RowDelegate<SortObiektRow> OnLoaded;
        public static void AddOnLoaded(RowDelegate<SortObiektRow> value)
        	=> OnLoaded = (RowDelegate<SortObiektRow>)Delegate.Combine(OnLoaded, value);

        internal static RowDelegate<SortObiektRow> OnAdded;
        public static void AddOnAdded(RowDelegate<SortObiektRow> value)
        	=> OnAdded = (RowDelegate<SortObiektRow>)Delegate.Combine(OnAdded, value);

        internal static RowDelegate<SortObiektRow> OnEditing;
        public static void AddOnEditing(RowDelegate<SortObiektRow> value)
        	=> OnEditing = (RowDelegate<SortObiektRow>)Delegate.Combine(OnEditing, value);

        internal static RowDelegate<SortObiektRow> OnDeleting;
        public static void AddOnDeleting(RowDelegate<SortObiektRow> value)
        	=> OnDeleting = (RowDelegate<SortObiektRow>)Delegate.Combine(OnDeleting, value);

        internal static RowDelegate<SortObiektRow> OnDeleted;
        public static void AddOnDeleted(RowDelegate<SortObiektRow> value)
        	=> OnDeleted = (RowDelegate<SortObiektRow>)Delegate.Combine(OnDeleted, value);

        internal static RowDelegate<SortObiektRow> OnRepacked;
        public static void AddOnRepacked(RowDelegate<SortObiektRow> value)
        	=> OnRepacked = (RowDelegate<SortObiektRow>)Delegate.Combine(OnRepacked, value);

        internal static RowAccessRightsDelegate<SortObiektRow> OnCalcObjectRight;
        public static void AddOnCalcObjectRight(RowAccessRightsDelegate<SortObiektRow> value)
        	=> OnCalcObjectRight = (RowAccessRightsDelegate<SortObiektRow>)Delegate.Combine(OnCalcObjectRight, value);

        internal static RowAccessRightsDelegate<SortObiektRow> OnCalcParentsObjectRight;
        public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<SortObiektRow> value)
        	=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<SortObiektRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

        internal static RowReadOnlyDelegate<SortObiektRow> OnCalcReadOnly;
        public static void AddOnCalcReadOnly(RowReadOnlyDelegate<SortObiektRow> value)
        	=> OnCalcReadOnly = (RowReadOnlyDelegate<SortObiektRow>)Delegate.Combine(OnCalcReadOnly, value);

    }

    public static readonly Soneta.Business.App.TableInfo SortPodObiektyTableInfo = new Soneta.Business.App.TableInfo.Create<SortPodObiekty, SortPodObiekt, SortPodObiektRecord>("SortPodO") {
    };

    public SortPodObiekty SortPodObiekty => (SortPodObiekty)Session.Tables[SortPodObiektyTableInfo];

    private static Soneta.Business.App.KeyInfo keyInfoSortPodObiektWgKod = new(SortPodObiektyTableInfo, table => new SortPodObiektTable.WgKodKey(table)) {
        Name = "WgKod",
        Unique = true,
        PrimaryKey = true,
        KeyFields = ["KodPodObiektu"],
    };

    /// <summary>
    /// Klasa implementująca standardową obsługę tabeli obiektów SortPodObiekt.
    /// Dziedzicząca klasa <see cref="SortPodObiekty"/> zawiera kod użytkownika
    /// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
    /// biblioteki <see cref="Soneta.Business"/>.
    /// </summary>
    /// <seealso cref="SortPodObiekty"/>
    /// <seealso cref="SortPodObiektRow"/>
    /// <seealso cref="SortPodObiekt"/>
    /// <seealso cref="Soneta.Business.Table"/>
    [Caption("Podtabela SortObiekty")]
    public abstract partial class SortPodObiektTable : Table {

        protected SortPodObiektTable() {}

        public partial class WgKodKey : Key<SortPodObiekt> {
            internal WgKodKey(Table table) : base(table) {
            }

            protected override object[] GetData(Row row, Record rec) => new object[] {
                ((SortPodObiektRecord)rec).KodPodObiektu.TrimEnd()
            };

            public SortPodObiekt this[string kodpodobiektu] => (SortPodObiekt)Find(kodpodobiektu);
        }

        public WgKodKey WgKod => (WgKodKey)Session.Keys[keyInfoSortPodObiektWgKod];


        /// <summary>
        /// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
        /// innych obiektów znajdujących się w tym samym module.
        /// </summary>
        /// <seealso cref="DodatekTreningowySortowanieModule"/>
        public new DodatekTreningowySortowanieModule Module => (DodatekTreningowySortowanieModule)base.Module;

        public System.Linq.IQueryable<SortPodObiekt> AsQuery() => AsQuery<SortPodObiekt>();

        /// <summary>
        /// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
        /// ID identyfikującego jednoznacznie obiekt w systemie.
        /// </summary>
        /// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
        /// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
        /// <seealso cref="SortPodObiekt"/>
        public new SortPodObiekt this[int id] => (SortPodObiekt)base[id];

        /// <summary>
        /// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
        /// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
        /// </summary>
        /// <param name="ids">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
        /// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
        /// <seealso cref="SortPodObiekt"/>
        public new SortPodObiekt[] this[int[] ids] => (SortPodObiekt[])base[ids];

        protected override Row CreateRow(RowCreator creator) => new SortPodObiekt();

        [Soneta.Langs.TranslateIgnore]
        protected override sealed void PrepareNames(StringBuilder names, string divider) {
            names.Append(divider); names.Append("KodPodObiektu");
            names.Append(divider); names.Append("NazwaPodObiektuVirtual");
            names.Append(divider); names.Append("OpisPodObiektu");
            names.Append(divider); names.Append("OkresPodObiektuFrom");
            names.Append(divider); names.Append("OkresPodObiektuTo");
        }

    }

    public abstract partial class SortPodObiektRow : Row {

        private SortPodObiektRecord record;

        protected override void AssignRecord(Record rec) {
            record = (SortPodObiektRecord)rec;
        }

        protected SortPodObiektRow() : base(true) {
        }

        protected override Row PrimaryRow => null;

        [MaxLength(6)]
        [Required]
        public string KodPodObiektu {
            get {
                if (record==null) GetRecord();
                return record.KodPodObiektu;
            }
            set {
                SortPodObiektSchema.KodPodObiektuBeforeEdit?.Invoke((SortPodObiekt)this, ref value);
                if (value!=null) value = value.TrimEnd();
                if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "KodPodObiektu");
                if (value.Length>KodPodObiektuLength) throw new ValueToLongException(this, "KodPodObiektu", KodPodObiektuLength);
                GetEdit(record==null, false);
                record.KodPodObiektu = value;
                if (State!=RowState.Detached) {
                    ResyncSet(keyInfoSortPodObiektWgKod);
                }
                SortPodObiektSchema.KodPodObiektuAfterEdit?.Invoke((SortPodObiekt)this);
            }
        }

        public const int KodPodObiektuLength = 6;

        [MaxLength(80)]
        [Required]
        public virtual string NazwaPodObiektuVirtual {
            get {
                if (record==null) GetRecord();
                return record.NazwaPodObiektuVirtual;
            }
            set {
                SortPodObiektSchema.NazwaPodObiektuVirtualBeforeEdit?.Invoke((SortPodObiekt)this, ref value);
                if (value!=null) value = value.TrimEnd();
                if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "NazwaPodObiektuVirtual");
                if (value.Length>NazwaPodObiektuVirtualLength) throw new ValueToLongException(this, "NazwaPodObiektuVirtual", NazwaPodObiektuVirtualLength);
                GetEdit(record==null, false);
                record.NazwaPodObiektuVirtual = value;
                SortPodObiektSchema.NazwaPodObiektuVirtualAfterEdit?.Invoke((SortPodObiekt)this);
            }
        }

        public  const int NazwaPodObiektuVirtualLength = 80;

        [MaxLength(200)]
        public string OpisPodObiektu {
            get {
                if (record==null) GetRecord();
                return record.OpisPodObiektu;
            }
            set {
                SortPodObiektSchema.OpisPodObiektuBeforeEdit?.Invoke((SortPodObiekt)this, ref value);
                if (value!=null) value = value.TrimEnd();
                if (value.Length>OpisPodObiektuLength) throw new ValueToLongException(this, "OpisPodObiektu", OpisPodObiektuLength);
                GetEdit(record==null, false);
                record.OpisPodObiektu = value;
                SortPodObiektSchema.OpisPodObiektuAfterEdit?.Invoke((SortPodObiekt)this);
            }
        }

        public const int OpisPodObiektuLength = 200;

        public FromTo OkresPodObiektu {
            get {
                if (record==null) GetRecord();
                return record.OkresPodObiektu;
            }
            set {
                SortPodObiektSchema.OkresPodObiektuBeforeEdit?.Invoke((SortPodObiekt)this, ref value);
                GetEdit(record==null, false);
                record.OkresPodObiektu = value;
                SortPodObiektSchema.OkresPodObiektuAfterEdit?.Invoke((SortPodObiekt)this);
            }
        }

        [Browsable(false)]
        public new SortPodObiekty Table => (SortPodObiekty)base.Table;

        [Browsable(false)]
        public DodatekTreningowySortowanieModule Module => Table.Module;

        protected override Soneta.Business.App.TableInfo TableInfo => SortPodObiektyTableInfo;

        public sealed override AccessRights GetObjectRight() {
            AccessRights ar = CalcObjectRight();
            SortPodObiektSchema.OnCalcObjectRight?.Invoke((SortPodObiekt)this, ref ar);
            return ar;
        }

        protected sealed override AccessRights GetParentsObjectRight() {
            AccessRights result = CalcParentsObjectRight();
            SortPodObiektSchema.OnCalcParentsObjectRight?.Invoke((SortPodObiekt)this, ref result);
            return result;
        }

        protected override bool CalcReadOnly() {
            bool result = false;
            SortPodObiektSchema.OnCalcReadOnly?.Invoke((SortPodObiekt)this, ref result);
            return result;
        }

        class KodPodObiektuRequiredVerifier : RequiredVerifier {
            internal KodPodObiektuRequiredVerifier(IRow row) : base(row, "KodPodObiektu") {
            }
            protected override bool IsValid() => !(string.IsNullOrEmpty(((SortPodObiektRow)Row).KodPodObiektu));
        }

        class NazwaPodObiektuVirtualRequiredVerifier : RequiredVerifier {
            internal NazwaPodObiektuVirtualRequiredVerifier(IRow row) : base(row, "NazwaPodObiektuVirtual") {
            }
            protected override bool IsValid() => !(string.IsNullOrEmpty(((SortPodObiektRow)Row).NazwaPodObiektuVirtual));
        }

        protected override void OnAdded() {
            base.OnAdded();
            Session.Verifiers.Add(new KodPodObiektuRequiredVerifier(this));
            Session.Verifiers.Add(new NazwaPodObiektuVirtualRequiredVerifier(this));
            SortPodObiektSchema.OnAdded?.Invoke((SortPodObiekt)this);
        }

        protected override void OnLoaded() {
            base.OnLoaded();
            SortPodObiektSchema.OnLoaded?.Invoke((SortPodObiekt)this);
        }

        protected override void OnEditing() {
            base.OnEditing();
            SortPodObiektSchema.OnEditing?.Invoke((SortPodObiekt)this);
        }

        protected override void OnDeleting() {
            base.OnDeleting();
            SortPodObiektSchema.OnDeleting?.Invoke((SortPodObiekt)this);
        }

        protected override void OnDeleted() {
            base.OnDeleted();
            SortPodObiektSchema.OnDeleted?.Invoke((SortPodObiekt)this);
        }

        protected override void OnRepacked() {
            base.OnRepacked();
            SortPodObiektSchema.OnRepacked?.Invoke((SortPodObiekt)this);
        }

    }

    public sealed class SortPodObiektRecord : Record {
        [Required]
        [MaxLength(6)]
        public string KodPodObiektu = "";
        [Required]
        [MaxLength(80)]
        public string NazwaPodObiektuVirtual = "";
        [MaxLength(200)]
        public string OpisPodObiektu = "";
        public FromTo OkresPodObiektu;

        public override Record Clone() {
            SortPodObiektRecord rec = (SortPodObiektRecord)MemberwiseClone();
            return rec;
        }

        public override void Load(RecordReader creator) {
            KodPodObiektu = creator.Read_string();
            NazwaPodObiektuVirtual = creator.Read_string();
            OpisPodObiektu = creator.Read_string();
            OkresPodObiektu = creator.Read_FromTo();
        }
    }

    public static class SortPodObiektSchema {

        internal static RowDelegate<SortPodObiektRow, string> KodPodObiektuBeforeEdit;
        public static void AddKodPodObiektuBeforeEdit(RowDelegate<SortPodObiektRow, string> value)
        	=> KodPodObiektuBeforeEdit = (RowDelegate<SortPodObiektRow, string>)Delegate.Combine(KodPodObiektuBeforeEdit, value);

        internal static RowDelegate<SortPodObiektRow> KodPodObiektuAfterEdit;
        public static void AddKodPodObiektuAfterEdit(RowDelegate<SortPodObiektRow> value)
        	=> KodPodObiektuAfterEdit = (RowDelegate<SortPodObiektRow>)Delegate.Combine(KodPodObiektuAfterEdit, value);

        internal static RowDelegate<SortPodObiektRow, string> NazwaPodObiektuVirtualBeforeEdit;
        public static void AddNazwaPodObiektuVirtualBeforeEdit(RowDelegate<SortPodObiektRow, string> value)
        	=> NazwaPodObiektuVirtualBeforeEdit = (RowDelegate<SortPodObiektRow, string>)Delegate.Combine(NazwaPodObiektuVirtualBeforeEdit, value);

        internal static RowDelegate<SortPodObiektRow> NazwaPodObiektuVirtualAfterEdit;
        public static void AddNazwaPodObiektuVirtualAfterEdit(RowDelegate<SortPodObiektRow> value)
        	=> NazwaPodObiektuVirtualAfterEdit = (RowDelegate<SortPodObiektRow>)Delegate.Combine(NazwaPodObiektuVirtualAfterEdit, value);

        internal static RowDelegate<SortPodObiektRow, string> OpisPodObiektuBeforeEdit;
        public static void AddOpisPodObiektuBeforeEdit(RowDelegate<SortPodObiektRow, string> value)
        	=> OpisPodObiektuBeforeEdit = (RowDelegate<SortPodObiektRow, string>)Delegate.Combine(OpisPodObiektuBeforeEdit, value);

        internal static RowDelegate<SortPodObiektRow> OpisPodObiektuAfterEdit;
        public static void AddOpisPodObiektuAfterEdit(RowDelegate<SortPodObiektRow> value)
        	=> OpisPodObiektuAfterEdit = (RowDelegate<SortPodObiektRow>)Delegate.Combine(OpisPodObiektuAfterEdit, value);

        internal static RowDelegate<SortPodObiektRow, FromTo> OkresPodObiektuBeforeEdit;
        public static void AddOkresPodObiektuBeforeEdit(RowDelegate<SortPodObiektRow, FromTo> value)
        	=> OkresPodObiektuBeforeEdit = (RowDelegate<SortPodObiektRow, FromTo>)Delegate.Combine(OkresPodObiektuBeforeEdit, value);

        internal static RowDelegate<SortPodObiektRow> OkresPodObiektuAfterEdit;
        public static void AddOkresPodObiektuAfterEdit(RowDelegate<SortPodObiektRow> value)
        	=> OkresPodObiektuAfterEdit = (RowDelegate<SortPodObiektRow>)Delegate.Combine(OkresPodObiektuAfterEdit, value);

        internal static RowDelegate<SortPodObiektRow> OnLoaded;
        public static void AddOnLoaded(RowDelegate<SortPodObiektRow> value)
        	=> OnLoaded = (RowDelegate<SortPodObiektRow>)Delegate.Combine(OnLoaded, value);

        internal static RowDelegate<SortPodObiektRow> OnAdded;
        public static void AddOnAdded(RowDelegate<SortPodObiektRow> value)
        	=> OnAdded = (RowDelegate<SortPodObiektRow>)Delegate.Combine(OnAdded, value);

        internal static RowDelegate<SortPodObiektRow> OnEditing;
        public static void AddOnEditing(RowDelegate<SortPodObiektRow> value)
        	=> OnEditing = (RowDelegate<SortPodObiektRow>)Delegate.Combine(OnEditing, value);

        internal static RowDelegate<SortPodObiektRow> OnDeleting;
        public static void AddOnDeleting(RowDelegate<SortPodObiektRow> value)
        	=> OnDeleting = (RowDelegate<SortPodObiektRow>)Delegate.Combine(OnDeleting, value);

        internal static RowDelegate<SortPodObiektRow> OnDeleted;
        public static void AddOnDeleted(RowDelegate<SortPodObiektRow> value)
        	=> OnDeleted = (RowDelegate<SortPodObiektRow>)Delegate.Combine(OnDeleted, value);

        internal static RowDelegate<SortPodObiektRow> OnRepacked;
        public static void AddOnRepacked(RowDelegate<SortPodObiektRow> value)
        	=> OnRepacked = (RowDelegate<SortPodObiektRow>)Delegate.Combine(OnRepacked, value);

        internal static RowAccessRightsDelegate<SortPodObiektRow> OnCalcObjectRight;
        public static void AddOnCalcObjectRight(RowAccessRightsDelegate<SortPodObiektRow> value)
        	=> OnCalcObjectRight = (RowAccessRightsDelegate<SortPodObiektRow>)Delegate.Combine(OnCalcObjectRight, value);

        internal static RowAccessRightsDelegate<SortPodObiektRow> OnCalcParentsObjectRight;
        public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<SortPodObiektRow> value)
        	=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<SortPodObiektRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

        internal static RowReadOnlyDelegate<SortPodObiektRow> OnCalcReadOnly;
        public static void AddOnCalcReadOnly(RowReadOnlyDelegate<SortPodObiektRow> value)
        	=> OnCalcReadOnly = (RowReadOnlyDelegate<SortPodObiektRow>)Delegate.Combine(OnCalcReadOnly, value);

    }

    public static readonly Soneta.Business.App.TableInfo SortRelObiektyTableInfo = new Soneta.Business.App.TableInfo.Create<SortRelObiekty, SortRelObiekt, SortRelObiektRecord>("SortRelO") {
    };

    public SortRelObiekty SortRelObiekty => (SortRelObiekty)Session.Tables[SortRelObiektyTableInfo];

    private static Soneta.Business.App.KeyInfo keyInfoSortRelObiektSortObiekt = new(SortRelObiektyTableInfo, table => new SortRelObiektTable.SortObiektRelation(table)) {
        Name = "Relacja do SortObiekt",
        RelationTo = "SortObiekt",
        DeleteCascade = true,
        RelationRight = RelationRightType.Primary,
        PrimaryRelation = true,
        Guided = RelationGuidedType.Inner,
        CollectionName = "Relacje",
        SubTableCreator = (st, row) => new SubTable<SortRelObiekt>(st, row),
        PrimaryKey = true,
        KeyFields = ["SortObiekt", "ID"],
    };

    private static Soneta.Business.App.KeyInfo keyInfoSortRelObiektWgKod = new(SortRelObiektyTableInfo, table => new SortRelObiektTable.WgKodKey(table)) {
        Name = "WgKod",
        Unique = true,
        KeyFields = ["KodSortRelObiekt"],
    };

    /// <summary>
    /// Klasa implementująca standardową obsługę tabeli obiektów SortRelObiekt.
    /// Dziedzicząca klasa <see cref="SortRelObiekty"/> zawiera kod użytkownika
    /// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
    /// biblioteki <see cref="Soneta.Business"/>.
    /// </summary>
    /// <seealso cref="SortRelObiekty"/>
    /// <seealso cref="SortRelObiektRow"/>
    /// <seealso cref="SortRelObiekt"/>
    /// <seealso cref="Soneta.Business.Table"/>
    [Caption("Podtabela SortRelObiekty")]
    public abstract partial class SortRelObiektTable : Table {

        protected SortRelObiektTable() {}

        public partial class SortObiektRelation : Key<SortRelObiekt> {
            internal SortObiektRelation(Table table) : base(table) {
            }

            protected override object[] GetData(Row row, Record rec) => new object[] {
                ((SortRelObiektRecord)rec).SortObiekt,
                row.ID
            };

            public SubTable<SortRelObiekt> this[SortObiekt sortobiekt] => new SubTable<SortRelObiekt>(this, sortobiekt);
        }

        public SortObiektRelation WgSortObiekt => (SortObiektRelation)Session.Keys[keyInfoSortRelObiektSortObiekt];

        public partial class WgKodKey : Key<SortRelObiekt> {
            internal WgKodKey(Table table) : base(table) {
            }

            protected override object[] GetData(Row row, Record rec) => new object[] {
                ((SortRelObiektRecord)rec).KodSortRelObiekt.TrimEnd()
            };

            public SortRelObiekt this[string kodsortrelobiekt] => (SortRelObiekt)Find(kodsortrelobiekt);
        }

        public WgKodKey WgKod => (WgKodKey)Session.Keys[keyInfoSortRelObiektWgKod];


        /// <summary>
        /// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
        /// innych obiektów znajdujących się w tym samym module.
        /// </summary>
        /// <seealso cref="DodatekTreningowySortowanieModule"/>
        public new DodatekTreningowySortowanieModule Module => (DodatekTreningowySortowanieModule)base.Module;

        public System.Linq.IQueryable<SortRelObiekt> AsQuery() => AsQuery<SortRelObiekt>();

        /// <summary>
        /// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
        /// ID identyfikującego jednoznacznie obiekt w systemie.
        /// </summary>
        /// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
        /// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
        /// <seealso cref="SortRelObiekt"/>
        public new SortRelObiekt this[int id] => (SortRelObiekt)base[id];

        /// <summary>
        /// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
        /// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
        /// </summary>
        /// <param name="ids">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
        /// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
        /// <seealso cref="SortRelObiekt"/>
        public new SortRelObiekt[] this[int[] ids] => (SortRelObiekt[])base[ids];

        protected override Row CreateRow(RowCreator creator) => new SortRelObiekt(creator);

        [Soneta.Langs.TranslateIgnore]
        protected override sealed void PrepareNames(StringBuilder names, string divider) {
            names.Append(divider); names.Append("SortObiekt");
            names.Append(divider); names.Append("KodSortRelObiekt");
            names.Append(divider); names.Append("NazwaSortRelObiektuVirtual");
            names.Append(divider); names.Append("OpisSortRelObiektu");
            names.Append(divider); names.Append("OkresSortRelObiektuFrom");
            names.Append(divider); names.Append("OkresSortRelObiektuTo");
        }

    }

    public abstract partial class SortRelObiektRow : Row {

        private SortRelObiektRecord record;

        protected override void AssignRecord(Record rec) {
            record = (SortRelObiektRecord)rec;
        }

        protected SortRelObiektRow(RowCreator creator) : base(false) {}
        protected SortRelObiektRow([Required] SortObiekt sortobiekt) : base(true) {
            if (sortobiekt==null) throw new RequiredException(this, "SortObiekt");
            CheckAccessDenied((Row)sortobiekt);
            GetRecord();
            record.SortObiekt = sortobiekt;
        }

        protected override Row PrimaryRow => (Row)SortObiekt;

        [Description("SortObiekt, do którego należy SortRelObiekt")]
        [Category("Ogólne")]
        [Required]
        public SortObiekt SortObiekt {
            get {
                if (record==null) GetRecord();
                return (SortObiekt)GetRowReference(ref record.SortObiekt);
            }
        }

        [MaxLength(6)]
        [Required]
        public string KodSortRelObiekt {
            get {
                if (record==null) GetRecord();
                return record.KodSortRelObiekt;
            }
            set {
                SortRelObiektSchema.KodSortRelObiektBeforeEdit?.Invoke((SortRelObiekt)this, ref value);
                if (value!=null) value = value.TrimEnd();
                if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "KodSortRelObiekt");
                if (value.Length>KodSortRelObiektLength) throw new ValueToLongException(this, "KodSortRelObiekt", KodSortRelObiektLength);
                GetEdit(record==null, false);
                record.KodSortRelObiekt = value;
                if (State!=RowState.Detached) {
                    ResyncSet(keyInfoSortRelObiektWgKod);
                }
                SortRelObiektSchema.KodSortRelObiektAfterEdit?.Invoke((SortRelObiekt)this);
            }
        }

        public const int KodSortRelObiektLength = 6;

        [MaxLength(80)]
        [Required]
        public virtual string NazwaSortRelObiektuVirtual {
            get {
                if (record==null) GetRecord();
                return record.NazwaSortRelObiektuVirtual;
            }
            set {
                SortRelObiektSchema.NazwaSortRelObiektuVirtualBeforeEdit?.Invoke((SortRelObiekt)this, ref value);
                if (value!=null) value = value.TrimEnd();
                if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "NazwaSortRelObiektuVirtual");
                if (value.Length>NazwaSortRelObiektuVirtualLength) throw new ValueToLongException(this, "NazwaSortRelObiektuVirtual", NazwaSortRelObiektuVirtualLength);
                GetEdit(record==null, false);
                record.NazwaSortRelObiektuVirtual = value;
                SortRelObiektSchema.NazwaSortRelObiektuVirtualAfterEdit?.Invoke((SortRelObiekt)this);
            }
        }

        public  const int NazwaSortRelObiektuVirtualLength = 80;

        [MaxLength(200)]
        public string OpisSortRelObiektu {
            get {
                if (record==null) GetRecord();
                return record.OpisSortRelObiektu;
            }
            set {
                SortRelObiektSchema.OpisSortRelObiektuBeforeEdit?.Invoke((SortRelObiekt)this, ref value);
                if (value!=null) value = value.TrimEnd();
                if (value.Length>OpisSortRelObiektuLength) throw new ValueToLongException(this, "OpisSortRelObiektu", OpisSortRelObiektuLength);
                GetEdit(record==null, false);
                record.OpisSortRelObiektu = value;
                SortRelObiektSchema.OpisSortRelObiektuAfterEdit?.Invoke((SortRelObiekt)this);
            }
        }

        public const int OpisSortRelObiektuLength = 200;

        public FromTo OkresSortRelObiektu {
            get {
                if (record==null) GetRecord();
                return record.OkresSortRelObiektu;
            }
            set {
                SortRelObiektSchema.OkresSortRelObiektuBeforeEdit?.Invoke((SortRelObiekt)this, ref value);
                GetEdit(record==null, false);
                record.OkresSortRelObiektu = value;
                SortRelObiektSchema.OkresSortRelObiektuAfterEdit?.Invoke((SortRelObiekt)this);
            }
        }

        [Browsable(false)]
        public new SortRelObiekty Table => (SortRelObiekty)base.Table;

        [Browsable(false)]
        public DodatekTreningowySortowanieModule Module => Table.Module;

        protected override Soneta.Business.App.TableInfo TableInfo => SortRelObiektyTableInfo;

        public sealed override AccessRights GetObjectRight() {
            AccessRights ar = CalcObjectRight();
            SortRelObiektSchema.OnCalcObjectRight?.Invoke((SortRelObiekt)this, ref ar);
            return ar;
        }

        protected sealed override AccessRights GetParentsObjectRight() {
            AccessRights result = CalcParentsObjectRight();
            SortRelObiektSchema.OnCalcParentsObjectRight?.Invoke((SortRelObiekt)this, ref result);
            return result;
        }

        protected override bool CalcReadOnly() {
            bool result = false;
            SortRelObiektSchema.OnCalcReadOnly?.Invoke((SortRelObiekt)this, ref result);
            return result;
        }

        protected override AccessRights CalcParentsObjectRight() {
            Row row = (Row)SortObiekt;
            return row?.GetObjectRight() ?? AccessRights.Granted;
        }

        class KodSortRelObiektRequiredVerifier : RequiredVerifier {
            internal KodSortRelObiektRequiredVerifier(IRow row) : base(row, "KodSortRelObiekt") {
            }
            protected override bool IsValid() => !(string.IsNullOrEmpty(((SortRelObiektRow)Row).KodSortRelObiekt));
        }

        class NazwaSortRelObiektuVirtualRequiredVerifier : RequiredVerifier {
            internal NazwaSortRelObiektuVirtualRequiredVerifier(IRow row) : base(row, "NazwaSortRelObiektuVirtual") {
            }
            protected override bool IsValid() => !(string.IsNullOrEmpty(((SortRelObiektRow)Row).NazwaSortRelObiektuVirtual));
        }

        protected override void OnAdded() {
            base.OnAdded();
            System.Diagnostics.Debug.Assert(record.SortObiekt==null || record.SortObiekt.State==RowState.Detached || Session==record.SortObiekt.Session);
            Session.Verifiers.Add(new KodSortRelObiektRequiredVerifier(this));
            Session.Verifiers.Add(new NazwaSortRelObiektuVirtualRequiredVerifier(this));
            SortRelObiektSchema.OnAdded?.Invoke((SortRelObiekt)this);
        }

        protected override void OnLoaded() {
            base.OnLoaded();
            SortRelObiektSchema.OnLoaded?.Invoke((SortRelObiekt)this);
        }

        protected override void OnEditing() {
            base.OnEditing();
            SortRelObiektSchema.OnEditing?.Invoke((SortRelObiekt)this);
        }

        protected override void OnDeleting() {
            base.OnDeleting();
            SortRelObiektSchema.OnDeleting?.Invoke((SortRelObiekt)this);
        }

        protected override void OnDeleted() {
            base.OnDeleted();
            SortRelObiektSchema.OnDeleted?.Invoke((SortRelObiekt)this);
        }

        protected override void OnRepacked() {
            base.OnRepacked();
            SortRelObiektSchema.OnRepacked?.Invoke((SortRelObiekt)this);
        }

        protected override void LockGuidedRoot() => LockGuidedRoot((Row)SortObiekt);

        public override GuidedRow GetGuidedRoot() => ((Row)SortObiekt)?.GetGuidedRoot();

    }

    public sealed class SortRelObiektRecord : Record {
        [Required]
        [ParentTable("SortObiekt")]
        public IRow SortObiekt;
        [Required]
        [MaxLength(6)]
        public string KodSortRelObiekt = "";
        [Required]
        [MaxLength(80)]
        public string NazwaSortRelObiektuVirtual = "";
        [MaxLength(200)]
        public string OpisSortRelObiektu = "";
        public FromTo OkresSortRelObiektu;

        public override Record Clone() {
            SortRelObiektRecord rec = (SortRelObiektRecord)MemberwiseClone();
            return rec;
        }

        public override void Load(RecordReader creator) {
            SortObiekt = creator.Read_Row(SortObiektyTableInfo);
            KodSortRelObiekt = creator.Read_string();
            NazwaSortRelObiektuVirtual = creator.Read_string();
            OpisSortRelObiektu = creator.Read_string();
            OkresSortRelObiektu = creator.Read_FromTo();
        }
    }

    public static class SortRelObiektSchema {

        internal static RowDelegate<SortRelObiektRow, string> KodSortRelObiektBeforeEdit;
        public static void AddKodSortRelObiektBeforeEdit(RowDelegate<SortRelObiektRow, string> value)
        	=> KodSortRelObiektBeforeEdit = (RowDelegate<SortRelObiektRow, string>)Delegate.Combine(KodSortRelObiektBeforeEdit, value);

        internal static RowDelegate<SortRelObiektRow> KodSortRelObiektAfterEdit;
        public static void AddKodSortRelObiektAfterEdit(RowDelegate<SortRelObiektRow> value)
        	=> KodSortRelObiektAfterEdit = (RowDelegate<SortRelObiektRow>)Delegate.Combine(KodSortRelObiektAfterEdit, value);

        internal static RowDelegate<SortRelObiektRow, string> NazwaSortRelObiektuVirtualBeforeEdit;
        public static void AddNazwaSortRelObiektuVirtualBeforeEdit(RowDelegate<SortRelObiektRow, string> value)
        	=> NazwaSortRelObiektuVirtualBeforeEdit = (RowDelegate<SortRelObiektRow, string>)Delegate.Combine(NazwaSortRelObiektuVirtualBeforeEdit, value);

        internal static RowDelegate<SortRelObiektRow> NazwaSortRelObiektuVirtualAfterEdit;
        public static void AddNazwaSortRelObiektuVirtualAfterEdit(RowDelegate<SortRelObiektRow> value)
        	=> NazwaSortRelObiektuVirtualAfterEdit = (RowDelegate<SortRelObiektRow>)Delegate.Combine(NazwaSortRelObiektuVirtualAfterEdit, value);

        internal static RowDelegate<SortRelObiektRow, string> OpisSortRelObiektuBeforeEdit;
        public static void AddOpisSortRelObiektuBeforeEdit(RowDelegate<SortRelObiektRow, string> value)
        	=> OpisSortRelObiektuBeforeEdit = (RowDelegate<SortRelObiektRow, string>)Delegate.Combine(OpisSortRelObiektuBeforeEdit, value);

        internal static RowDelegate<SortRelObiektRow> OpisSortRelObiektuAfterEdit;
        public static void AddOpisSortRelObiektuAfterEdit(RowDelegate<SortRelObiektRow> value)
        	=> OpisSortRelObiektuAfterEdit = (RowDelegate<SortRelObiektRow>)Delegate.Combine(OpisSortRelObiektuAfterEdit, value);

        internal static RowDelegate<SortRelObiektRow, FromTo> OkresSortRelObiektuBeforeEdit;
        public static void AddOkresSortRelObiektuBeforeEdit(RowDelegate<SortRelObiektRow, FromTo> value)
        	=> OkresSortRelObiektuBeforeEdit = (RowDelegate<SortRelObiektRow, FromTo>)Delegate.Combine(OkresSortRelObiektuBeforeEdit, value);

        internal static RowDelegate<SortRelObiektRow> OkresSortRelObiektuAfterEdit;
        public static void AddOkresSortRelObiektuAfterEdit(RowDelegate<SortRelObiektRow> value)
        	=> OkresSortRelObiektuAfterEdit = (RowDelegate<SortRelObiektRow>)Delegate.Combine(OkresSortRelObiektuAfterEdit, value);

        internal static RowDelegate<SortRelObiektRow> OnLoaded;
        public static void AddOnLoaded(RowDelegate<SortRelObiektRow> value)
        	=> OnLoaded = (RowDelegate<SortRelObiektRow>)Delegate.Combine(OnLoaded, value);

        internal static RowDelegate<SortRelObiektRow> OnAdded;
        public static void AddOnAdded(RowDelegate<SortRelObiektRow> value)
        	=> OnAdded = (RowDelegate<SortRelObiektRow>)Delegate.Combine(OnAdded, value);

        internal static RowDelegate<SortRelObiektRow> OnEditing;
        public static void AddOnEditing(RowDelegate<SortRelObiektRow> value)
        	=> OnEditing = (RowDelegate<SortRelObiektRow>)Delegate.Combine(OnEditing, value);

        internal static RowDelegate<SortRelObiektRow> OnDeleting;
        public static void AddOnDeleting(RowDelegate<SortRelObiektRow> value)
        	=> OnDeleting = (RowDelegate<SortRelObiektRow>)Delegate.Combine(OnDeleting, value);

        internal static RowDelegate<SortRelObiektRow> OnDeleted;
        public static void AddOnDeleted(RowDelegate<SortRelObiektRow> value)
        	=> OnDeleted = (RowDelegate<SortRelObiektRow>)Delegate.Combine(OnDeleted, value);

        internal static RowDelegate<SortRelObiektRow> OnRepacked;
        public static void AddOnRepacked(RowDelegate<SortRelObiektRow> value)
        	=> OnRepacked = (RowDelegate<SortRelObiektRow>)Delegate.Combine(OnRepacked, value);

        internal static RowAccessRightsDelegate<SortRelObiektRow> OnCalcObjectRight;
        public static void AddOnCalcObjectRight(RowAccessRightsDelegate<SortRelObiektRow> value)
        	=> OnCalcObjectRight = (RowAccessRightsDelegate<SortRelObiektRow>)Delegate.Combine(OnCalcObjectRight, value);

        internal static RowAccessRightsDelegate<SortRelObiektRow> OnCalcParentsObjectRight;
        public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<SortRelObiektRow> value)
        	=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<SortRelObiektRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

        internal static RowReadOnlyDelegate<SortRelObiektRow> OnCalcReadOnly;
        public static void AddOnCalcReadOnly(RowReadOnlyDelegate<SortRelObiektRow> value)
        	=> OnCalcReadOnly = (RowReadOnlyDelegate<SortRelObiektRow>)Delegate.Combine(OnCalcReadOnly, value);

    }

    public static readonly Soneta.Business.App.TableInfo SortAdresyTableInfo = new Soneta.Business.App.TableInfo.Create<SortAdresy, SortAdresExt, SortAdresExtRecord>("SortAdre") {
    };

    public SortAdresy SortAdresy => (SortAdresy)Session.Tables[SortAdresyTableInfo];

    private static Soneta.Business.App.KeyInfo keyInfoSortAdresExtHost = new(SortAdresyTableInfo, table => new SortAdresExtTable.HostRelation(table)) {
        Name = "SortAdresy",
        RelationTo = typeof(ISortAdresHost),
        DeleteCascade = true,
        PrimaryRelation = true,
        Guided = RelationGuidedType.Inner,
        Unique = true,
        PrimaryKey = true,
        KeyFields = ["Host"],
        Interfaces = 1u,
    };

    /// <summary>
    /// Klasa implementująca standardową obsługę tabeli obiektów SortAdresExt.
    /// Dziedzicząca klasa <see cref="SortAdresy"/> zawiera kod użytkownika
    /// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
    /// biblioteki <see cref="Soneta.Business"/>.
    /// </summary>
    /// <seealso cref="SortAdresy"/>
    /// <seealso cref="SortAdresExtRow"/>
    /// <seealso cref="SortAdresExt"/>
    /// <seealso cref="Soneta.Business.Table"/>
    public abstract partial class SortAdresExtTable : Table {

        protected SortAdresExtTable() {}

        public partial class HostRelation : Key<SortAdresExt> {
            internal HostRelation(Table table) : base(table) {
            }

            protected override object[] GetData(Row row, Record rec) => new object[] {
                ((SortAdresExtRecord)rec).Host
            };

            public SortAdresExt this[ISortAdresHost host] => (SortAdresExt)Find(host);
        }

        public HostRelation WgHost => (HostRelation)Session.Keys[keyInfoSortAdresExtHost];


        /// <summary>
        /// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
        /// innych obiektów znajdujących się w tym samym module.
        /// </summary>
        /// <seealso cref="DodatekTreningowySortowanieModule"/>
        public new DodatekTreningowySortowanieModule Module => (DodatekTreningowySortowanieModule)base.Module;

        public System.Linq.IQueryable<SortAdresExt> AsQuery() => AsQuery<SortAdresExt>();

        /// <summary>
        /// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
        /// ID identyfikującego jednoznacznie obiekt w systemie.
        /// </summary>
        /// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
        /// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
        /// <seealso cref="SortAdresExt"/>
        public new SortAdresExt this[int id] => (SortAdresExt)base[id];

        /// <summary>
        /// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
        /// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
        /// </summary>
        /// <param name="ids">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
        /// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
        /// <seealso cref="SortAdresExt"/>
        public new SortAdresExt[] this[int[] ids] => (SortAdresExt[])base[ids];

        protected override Row CreateRow(RowCreator creator) => new SortAdresExt(creator);

        [Soneta.Langs.TranslateIgnore]
        protected override sealed void PrepareNames(StringBuilder names, string divider) {
            names.Append(divider); names.Append("Host");
            names.Append(divider); names.Append("HostType");
            names.Append(divider); names.Append("Blokada");
            SortAdresRecord.PrepareNames(names, divider+"SortAdres");
        }

    }

    [Caption("SortAdres")]
    public abstract partial class SortAdresExtRow : Row, IRowInvoker {

        private SortAdresExtRecord record;

        protected override void AssignRecord(Record rec) {
            record = (SortAdresExtRecord)rec;
            SortAdres.AssignRecord(record?.SortAdres);
        }

        private void initializer() {
            SortAdres.AssignParent(this, "SortAdres");
        }
        protected SortAdresExtRow(RowCreator creator) : base(false) => initializer();
        protected SortAdresExtRow([Required] ISortAdresHost host) : base(true) {
            if (host==null) throw new RequiredException(this, "Host");
            initializer();
            GetRecord();
            record.Host = host;
        }

        protected override Row PrimaryRow => (Row)Host;

        [Required]
        public ISortAdresHost Host {
            get {
                if (record==null) GetRecord();
                return (ISortAdresHost)GetRowReference(ref record.Host);
            }
        }

        public bool Blokada {
            get {
                if (record==null) GetRecord();
                return record.Blokada;
            }
            set {
                SortAdresExtSchema.BlokadaBeforeEdit?.Invoke((SortAdresExt)this, ref value);
                GetEdit(record==null, false);
                record.Blokada = value;
                SortAdresExtSchema.BlokadaAfterEdit?.Invoke((SortAdresExt)this);
            }
        }

        public SortAdres SortAdres { get; } = new SortAdres();

        [Browsable(false)]
        public new SortAdresy Table => (SortAdresy)base.Table;

        [Browsable(false)]
        public DodatekTreningowySortowanieModule Module => Table.Module;

        protected override Soneta.Business.App.TableInfo TableInfo => SortAdresyTableInfo;

        public sealed override AccessRights GetObjectRight() {
            AccessRights ar = CalcObjectRight();
            SortAdresExtSchema.OnCalcObjectRight?.Invoke((SortAdresExt)this, ref ar);
            return ar;
        }

        protected sealed override AccessRights GetParentsObjectRight() {
            AccessRights result = CalcParentsObjectRight();
            SortAdresExtSchema.OnCalcParentsObjectRight?.Invoke((SortAdresExt)this, ref result);
            return result;
        }

        protected override bool CalcReadOnly() {
            bool result = false;
            SortAdresExtSchema.OnCalcReadOnly?.Invoke((SortAdresExt)this, ref result);
            return result;
        }

        protected override void OnAdded() {
            base.OnAdded();
            System.Diagnostics.Debug.Assert(record.Host==null || record.Host.State==RowState.Detached || Session==record.Host.Session);
            SortAdresExtSchema.OnAdded?.Invoke((SortAdresExt)this);
        }

        protected override void OnLoaded() {
            base.OnLoaded();
            SortAdresExtSchema.OnLoaded?.Invoke((SortAdresExt)this);
        }

        protected override void OnEditing() {
            base.OnEditing();
            SortAdresExtSchema.OnEditing?.Invoke((SortAdresExt)this);
        }

        protected override void OnDeleting() {
            base.OnDeleting();
            SortAdresExtSchema.OnDeleting?.Invoke((SortAdresExt)this);
        }

        protected override void OnDeleted() {
            base.OnDeleted();
            SortAdresExtSchema.OnDeleted?.Invoke((SortAdresExt)this);
        }

        protected override void OnRepacked() {
            base.OnRepacked();
            SortAdresExtSchema.OnRepacked?.Invoke((SortAdresExt)this);
        }

        void IRowInvoker.Invoke(Action<RowBase> invoker) {
            invoker(SortAdres);
        }

        protected override void LockGuidedRoot() => LockGuidedRoot((Row)Host);

        public override GuidedRow GetGuidedRoot() => ((Row)Host)?.GetGuidedRoot();

    }

    public sealed class SortAdresExtRecord : Record {
        [Required]
        [ParentTable("*")]
        public IRow Host;
        public bool Blokada;
        public SortAdresRecord SortAdres = new SortAdresRecord();

        public override Record Clone() {
            SortAdresExtRecord rec = (SortAdresExtRecord)MemberwiseClone();
            rec.SortAdres = (SortAdresRecord)SortAdres.Clone();
            return rec;
        }

        public override void Load(RecordReader creator) {
            Host = creator.Read_Interface();
            Blokada = creator.Read_boolean();
            SortAdres.Load(creator);
        }
    }

    public static class SortAdresExtSchema {

        internal static RowDelegate<SortAdresExtRow, bool> BlokadaBeforeEdit;
        public static void AddBlokadaBeforeEdit(RowDelegate<SortAdresExtRow, bool> value)
        	=> BlokadaBeforeEdit = (RowDelegate<SortAdresExtRow, bool>)Delegate.Combine(BlokadaBeforeEdit, value);

        internal static RowDelegate<SortAdresExtRow> BlokadaAfterEdit;
        public static void AddBlokadaAfterEdit(RowDelegate<SortAdresExtRow> value)
        	=> BlokadaAfterEdit = (RowDelegate<SortAdresExtRow>)Delegate.Combine(BlokadaAfterEdit, value);

        internal static RowDelegate<SortAdresExtRow> OnLoaded;
        public static void AddOnLoaded(RowDelegate<SortAdresExtRow> value)
        	=> OnLoaded = (RowDelegate<SortAdresExtRow>)Delegate.Combine(OnLoaded, value);

        internal static RowDelegate<SortAdresExtRow> OnAdded;
        public static void AddOnAdded(RowDelegate<SortAdresExtRow> value)
        	=> OnAdded = (RowDelegate<SortAdresExtRow>)Delegate.Combine(OnAdded, value);

        internal static RowDelegate<SortAdresExtRow> OnEditing;
        public static void AddOnEditing(RowDelegate<SortAdresExtRow> value)
        	=> OnEditing = (RowDelegate<SortAdresExtRow>)Delegate.Combine(OnEditing, value);

        internal static RowDelegate<SortAdresExtRow> OnDeleting;
        public static void AddOnDeleting(RowDelegate<SortAdresExtRow> value)
        	=> OnDeleting = (RowDelegate<SortAdresExtRow>)Delegate.Combine(OnDeleting, value);

        internal static RowDelegate<SortAdresExtRow> OnDeleted;
        public static void AddOnDeleted(RowDelegate<SortAdresExtRow> value)
        	=> OnDeleted = (RowDelegate<SortAdresExtRow>)Delegate.Combine(OnDeleted, value);

        internal static RowDelegate<SortAdresExtRow> OnRepacked;
        public static void AddOnRepacked(RowDelegate<SortAdresExtRow> value)
        	=> OnRepacked = (RowDelegate<SortAdresExtRow>)Delegate.Combine(OnRepacked, value);

        internal static RowAccessRightsDelegate<SortAdresExtRow> OnCalcObjectRight;
        public static void AddOnCalcObjectRight(RowAccessRightsDelegate<SortAdresExtRow> value)
        	=> OnCalcObjectRight = (RowAccessRightsDelegate<SortAdresExtRow>)Delegate.Combine(OnCalcObjectRight, value);

        internal static RowAccessRightsDelegate<SortAdresExtRow> OnCalcParentsObjectRight;
        public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<SortAdresExtRow> value)
        	=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<SortAdresExtRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

        internal static RowReadOnlyDelegate<SortAdresExtRow> OnCalcReadOnly;
        public static void AddOnCalcReadOnly(RowReadOnlyDelegate<SortAdresExtRow> value)
        	=> OnCalcReadOnly = (RowReadOnlyDelegate<SortAdresExtRow>)Delegate.Combine(OnCalcReadOnly, value);

    }

    public static readonly Soneta.Business.App.SubRowInfo SortAdresRowInfo = new Soneta.Business.App.SubRowInfo.Create<SortAdres, SortAdresRecord>();

    public abstract partial class SortAdresRow : SubRow {

        private SortAdresRecord record;

        public void AssignRecord(Record rec) {
            record = (SortAdresRecord)rec;
        }

        [Description("Kod pocztowy")]
        [MaskEdit("00-000", SaveLiteral=false)]
        [SqlResolving(IgnoreDashes = true, NoDashesData = true)]
        public int KodPocztowy {
            get {
                if (record==null) GetRecord();
                return record.KodPocztowy;
            }
            set {
                SortAdresSchema.KodPocztowyBeforeEdit?.Invoke((SortAdres)this, ref value);
                GetEdit(record==null, false);
                record.KodPocztowy = value;
                SortAdresSchema.KodPocztowyAfterEdit?.Invoke((SortAdres)this);
            }
        }

        [Description("Miejscowość")]
        [Caption("Miejscowość")]
        [MaxLength(56)]
        public string Miejscowosc {
            get {
                if (record==null) GetRecord();
                return record.Miejscowosc;
            }
            set {
                SortAdresSchema.MiejscowoscBeforeEdit?.Invoke((SortAdres)this, ref value);
                if (value!=null) value = value.TrimEnd();
                if (value.Length>MiejscowoscLength) throw new ValueToLongException(this, "Miejscowosc", MiejscowoscLength);
                GetEdit(record==null, false);
                record.Miejscowosc = value;
                SortAdresSchema.MiejscowoscAfterEdit?.Invoke((SortAdres)this);
            }
        }

        public const int MiejscowoscLength = 56;

        [Description("Nazwa ulicy (alei, osiedla)")]
        [MaxLength(65)]
        public string Ulica {
            get {
                if (record==null) GetRecord();
                return record.Ulica;
            }
            set {
                SortAdresSchema.UlicaBeforeEdit?.Invoke((SortAdres)this, ref value);
                if (value!=null) value = value.TrimEnd();
                if (value.Length>UlicaLength) throw new ValueToLongException(this, "Ulica", UlicaLength);
                GetEdit(record==null, false);
                record.Ulica = value;
                SortAdresSchema.UlicaAfterEdit?.Invoke((SortAdres)this);
            }
        }

        public const int UlicaLength = 65;

        [Description("Numer domu (bloku)")]
        [MaxLength(9)]
        public string NrDomu {
            get {
                if (record==null) GetRecord();
                return record.NrDomu;
            }
            set {
                SortAdresSchema.NrDomuBeforeEdit?.Invoke((SortAdres)this, ref value);
                if (value!=null) value = value.TrimEnd();
                if (value.Length>NrDomuLength) throw new ValueToLongException(this, "NrDomu", NrDomuLength);
                GetEdit(record==null, false);
                record.NrDomu = value;
                SortAdresSchema.NrDomuAfterEdit?.Invoke((SortAdres)this);
            }
        }

        public const int NrDomuLength = 9;

        [Description("Numer lokalu w domu (bloku)")]
        [MaxLength(10)]
        public string NrLokalu {
            get {
                if (record==null) GetRecord();
                return record.NrLokalu;
            }
            set {
                SortAdresSchema.NrLokaluBeforeEdit?.Invoke((SortAdres)this, ref value);
                if (value!=null) value = value.TrimEnd();
                if (value.Length>NrLokaluLength) throw new ValueToLongException(this, "NrLokalu", NrLokaluLength);
                GetEdit(record==null, false);
                record.NrLokalu = value;
                SortAdresSchema.NrLokaluAfterEdit?.Invoke((SortAdres)this);
            }
        }

        public const int NrLokaluLength = 10;

        protected override void OnAdded() {
            base.OnAdded();
            SortAdresSchema.OnAdded?.Invoke((SortAdres)this);
        }

        protected override void OnLoaded() {
            base.OnLoaded();
            SortAdresSchema.OnLoaded?.Invoke((SortAdres)this);
        }

        protected override void OnEditing() {
            base.OnEditing();
            SortAdresSchema.OnEditing?.Invoke((SortAdres)this);
        }

        protected override void OnDeleting() {
            base.OnDeleting();
            SortAdresSchema.OnDeleting?.Invoke((SortAdres)this);
        }

        protected override void OnDeleted() {
            base.OnDeleted();
            SortAdresSchema.OnDeleted?.Invoke((SortAdres)this);
        }

        protected override void OnRepacked() {
            base.OnRepacked();
            SortAdresSchema.OnRepacked?.Invoke((SortAdres)this);
        }

    }

    public sealed class SortAdresRecord : Record {
        public int KodPocztowy;
        [MaxLength(56)]
        public string Miejscowosc = "";
        [MaxLength(65)]
        public string Ulica = "";
        [MaxLength(9)]
        public string NrDomu = "";
        [MaxLength(10)]
        public string NrLokalu = "";

        public override Record Clone() {
            SortAdresRecord rec = (SortAdresRecord)MemberwiseClone();
            return rec;
        }

        [Soneta.Langs.TranslateIgnore]
        public static void PrepareNames(StringBuilder names, string divider) {
            names.Append(divider); names.Append("KodPocztowy");
            names.Append(divider); names.Append("Miejscowosc");
            names.Append(divider); names.Append("Ulica");
            names.Append(divider); names.Append("NrDomu");
            names.Append(divider); names.Append("NrLokalu");
        }

        public override void Load(RecordReader creator) {
            KodPocztowy = creator.Read_int();
            Miejscowosc = creator.Read_string();
            Ulica = creator.Read_string();
            NrDomu = creator.Read_string();
            NrLokalu = creator.Read_string();
        }
    }

    public static class SortAdresSchema {

        internal static RowDelegate<SortAdresRow, int> KodPocztowyBeforeEdit;
        public static void AddKodPocztowyBeforeEdit(RowDelegate<SortAdresRow, int> value)
        	=> KodPocztowyBeforeEdit = (RowDelegate<SortAdresRow, int>)Delegate.Combine(KodPocztowyBeforeEdit, value);

        internal static RowDelegate<SortAdresRow> KodPocztowyAfterEdit;
        public static void AddKodPocztowyAfterEdit(RowDelegate<SortAdresRow> value)
        	=> KodPocztowyAfterEdit = (RowDelegate<SortAdresRow>)Delegate.Combine(KodPocztowyAfterEdit, value);

        internal static RowDelegate<SortAdresRow, string> MiejscowoscBeforeEdit;
        public static void AddMiejscowoscBeforeEdit(RowDelegate<SortAdresRow, string> value)
        	=> MiejscowoscBeforeEdit = (RowDelegate<SortAdresRow, string>)Delegate.Combine(MiejscowoscBeforeEdit, value);

        internal static RowDelegate<SortAdresRow> MiejscowoscAfterEdit;
        public static void AddMiejscowoscAfterEdit(RowDelegate<SortAdresRow> value)
        	=> MiejscowoscAfterEdit = (RowDelegate<SortAdresRow>)Delegate.Combine(MiejscowoscAfterEdit, value);

        internal static RowDelegate<SortAdresRow, string> UlicaBeforeEdit;
        public static void AddUlicaBeforeEdit(RowDelegate<SortAdresRow, string> value)
        	=> UlicaBeforeEdit = (RowDelegate<SortAdresRow, string>)Delegate.Combine(UlicaBeforeEdit, value);

        internal static RowDelegate<SortAdresRow> UlicaAfterEdit;
        public static void AddUlicaAfterEdit(RowDelegate<SortAdresRow> value)
        	=> UlicaAfterEdit = (RowDelegate<SortAdresRow>)Delegate.Combine(UlicaAfterEdit, value);

        internal static RowDelegate<SortAdresRow, string> NrDomuBeforeEdit;
        public static void AddNrDomuBeforeEdit(RowDelegate<SortAdresRow, string> value)
        	=> NrDomuBeforeEdit = (RowDelegate<SortAdresRow, string>)Delegate.Combine(NrDomuBeforeEdit, value);

        internal static RowDelegate<SortAdresRow> NrDomuAfterEdit;
        public static void AddNrDomuAfterEdit(RowDelegate<SortAdresRow> value)
        	=> NrDomuAfterEdit = (RowDelegate<SortAdresRow>)Delegate.Combine(NrDomuAfterEdit, value);

        internal static RowDelegate<SortAdresRow, string> NrLokaluBeforeEdit;
        public static void AddNrLokaluBeforeEdit(RowDelegate<SortAdresRow, string> value)
        	=> NrLokaluBeforeEdit = (RowDelegate<SortAdresRow, string>)Delegate.Combine(NrLokaluBeforeEdit, value);

        internal static RowDelegate<SortAdresRow> NrLokaluAfterEdit;
        public static void AddNrLokaluAfterEdit(RowDelegate<SortAdresRow> value)
        	=> NrLokaluAfterEdit = (RowDelegate<SortAdresRow>)Delegate.Combine(NrLokaluAfterEdit, value);

        internal static RowDelegate<SortAdresRow> OnLoaded;
        public static void AddOnLoaded(RowDelegate<SortAdresRow> value)
        	=> OnLoaded = (RowDelegate<SortAdresRow>)Delegate.Combine(OnLoaded, value);

        internal static RowDelegate<SortAdresRow> OnAdded;
        public static void AddOnAdded(RowDelegate<SortAdresRow> value)
        	=> OnAdded = (RowDelegate<SortAdresRow>)Delegate.Combine(OnAdded, value);

        internal static RowDelegate<SortAdresRow> OnEditing;
        public static void AddOnEditing(RowDelegate<SortAdresRow> value)
        	=> OnEditing = (RowDelegate<SortAdresRow>)Delegate.Combine(OnEditing, value);

        internal static RowDelegate<SortAdresRow> OnDeleting;
        public static void AddOnDeleting(RowDelegate<SortAdresRow> value)
        	=> OnDeleting = (RowDelegate<SortAdresRow>)Delegate.Combine(OnDeleting, value);

        internal static RowDelegate<SortAdresRow> OnDeleted;
        public static void AddOnDeleted(RowDelegate<SortAdresRow> value)
        	=> OnDeleted = (RowDelegate<SortAdresRow>)Delegate.Combine(OnDeleted, value);

        internal static RowDelegate<SortAdresRow> OnRepacked;
        public static void AddOnRepacked(RowDelegate<SortAdresRow> value)
        	=> OnRepacked = (RowDelegate<SortAdresRow>)Delegate.Combine(OnRepacked, value);

    }

}

[System.CodeDom.Compiler.GeneratedCode("Soneta.CodeGenerators", "4")]
public static class StaticsDodatekTreningowySortowanieModule {
    public static DodatekTreningowySortowanieModule GetDodatekTreningowySortowanie(this Session session) => DodatekTreningowySortowanieModule.GetInstance(session);

    public static TResult Record<TResult>(this IRecordInvoker<SortObiekt, TResult> row, Action<DodatekTreningowySortowanieModule.SortObiektRecord> action)
        => row.InvokeAction(action, (rec, act) => ((Action<DodatekTreningowySortowanieModule.SortObiektRecord>)act)((DodatekTreningowySortowanieModule.SortObiektRecord)rec));

    public static TResult Record<TResult>(this IRecordInvoker<SortPodObiekt, TResult> row, Action<DodatekTreningowySortowanieModule.SortPodObiektRecord> action)
        => row.InvokeAction(action, (rec, act) => ((Action<DodatekTreningowySortowanieModule.SortPodObiektRecord>)act)((DodatekTreningowySortowanieModule.SortPodObiektRecord)rec));

    public static TResult Record<TResult>(this IRecordInvoker<SortRelObiekt, TResult> row, Action<DodatekTreningowySortowanieModule.SortRelObiektRecord> action)
        => row.InvokeAction(action, (rec, act) => ((Action<DodatekTreningowySortowanieModule.SortRelObiektRecord>)act)((DodatekTreningowySortowanieModule.SortRelObiektRecord)rec));

    public static TResult Record<TResult>(this IRecordInvoker<SortAdresExt, TResult> row, Action<DodatekTreningowySortowanieModule.SortAdresExtRecord> action)
        => row.InvokeAction(action, (rec, act) => ((Action<DodatekTreningowySortowanieModule.SortAdresExtRecord>)act)((DodatekTreningowySortowanieModule.SortAdresExtRecord)rec));
}

