#warning Tabela Bagaze nie posiada klucza primary.

//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using Soneta.Types;
using Soneta.Business;
using Soneta.CRM;
using Soneta.Szkolenie;
using DodatekDoSzkolenia;

[assembly: ModuleType("DodatekDoSzkolenia", typeof(DodatekDoSzkolenia.DodatekDoSzkoleniaModule), 4, "DodatekDoSzkolenia", 1, VersionNumber=1)]

namespace DodatekDoSzkolenia {

	/// <summary>
	/// Moduł DodatekDoSzkolenia.
	/// <seealso cref="Soneta.CRM"/>
	/// <seealso cref="Soneta.Szkolenie"/>
	/// </summary>
	/// <seealso cref="Soneta.Business.Module"/>
	/// <seealso cref="Soneta.Business.Session"/>
	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public partial class DodatekDoSzkoleniaModule : Module {

		public static DodatekDoSzkoleniaModule GetInstance(ISessionable session) => (DodatekDoSzkoleniaModule)session?.Session?.Modules[moduleInfo];

		private static Soneta.Business.App.ModuleInfo moduleInfo = new Soneta.Business.App.ModuleInfo(session => new DodatekDoSzkoleniaModule(session)) {
		};

		DodatekDoSzkoleniaModule(Session session) : base(session) {}

		private CRMModule moduleCRM;

		[Browsable(false)]
		public CRMModule CRM => moduleCRM ?? (moduleCRM = CRMModule.GetInstance(Session));

		private SzkolenieModule moduleSzkolenie;

		[Browsable(false)]
		public SzkolenieModule Szkolenie => moduleSzkolenie ?? (moduleSzkolenie = SzkolenieModule.GetInstance(Session));

		public static readonly Soneta.Business.App.TableInfo BagazeTableInfo = new Soneta.Business.App.TableInfo.Create<Bagaze, Bagaz, BagazRecord>("Bagaz") {
		};

		public Bagaze Bagaze => (Bagaze)Session.Tables[BagazeTableInfo];

		private static Soneta.Business.App.KeyInfo keyInfoBagazLot = new Soneta.Business.App.KeyInfo(BagazeTableInfo, table => new BagazTable.LotRelation(table)) {
			Name = "Rezerwacja_Lot",
			RelationTo = "Lot",
			DeleteCascade = true,
			CollectionName = "Fields",
			SubTableCreator = (st, row) => new SubTable<Bagaz>(st, row),
			KeyFields = new[] {"Lot", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoBagazMaszyna = new Soneta.Business.App.KeyInfo(BagazeTableInfo, table => new BagazTable.MaszynaRelation(table)) {
			Name = "Rezerwacja_Maszyna",
			RelationTo = "Maszyna",
			DeleteCascade = true,
			CollectionName = "Fields",
			SubTableCreator = (st, row) => new SubTable<Bagaz>(st, row),
			KeyFields = new[] {"Maszyna", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoBagazKlient = new Soneta.Business.App.KeyInfo(BagazeTableInfo, table => new BagazTable.KlientRelation(table)) {
			Name = "Rezerwacja_Klient",
			RelationTo = "Kontrahent",
			DeleteCascade = true,
			CollectionName = "Fields",
			SubTableCreator = (st, row) => new SubTable<Bagaz>(st, row),
			KeyFields = new[] {"Klient", "ID"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów Bagaz.
		/// Dziedzicząca klasa <see cref="Bagaze"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="Bagaze"/>
		/// <seealso cref="BagazRow"/>
		/// <seealso cref="Bagaz"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Bagaze")]
		public abstract partial class BagazTable : GuidedTable {

			protected BagazTable() {}

			public partial class LotRelation : Key<Bagaz> {
				internal LotRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((BagazRecord)rec).Lot,
					row.ID
				};

				public SubTable<Bagaz> this[Lot lot] => new SubTable<Bagaz>(this, lot);
			}

			public LotRelation WgLot => (LotRelation)Session.Keys[keyInfoBagazLot];

			public partial class MaszynaRelation : Key<Bagaz> {
				internal MaszynaRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((BagazRecord)rec).Maszyna,
					row.ID
				};

				public SubTable<Bagaz> this[Maszyna maszyna] => new SubTable<Bagaz>(this, maszyna);
			}

			public MaszynaRelation WgMaszyna => (MaszynaRelation)Session.Keys[keyInfoBagazMaszyna];

			public partial class KlientRelation : Key<Bagaz> {
				internal KlientRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((BagazRecord)rec).Klient,
					row.ID
				};

				public SubTable<Bagaz> this[Kontrahent klient] => new SubTable<Bagaz>(this, klient);
			}

			public KlientRelation WgKlient => (KlientRelation)Session.Keys[keyInfoBagazKlient];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="DodatekDoSzkoleniaModule"/>
			public new DodatekDoSzkoleniaModule Module => (DodatekDoSzkoleniaModule)base.Module;

			public System.Linq.IQueryable<Bagaz> AsQuery() => AsQuery<Bagaz>();

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Bagaz"/>
			public new Bagaz this[int id] => (Bagaz)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Bagaz"/>
			public new Bagaz[] this[int[] ids] => (Bagaz[])base[ids];

			public new Bagaz this[Guid guid] => (Bagaz)base[guid];

			protected override Row CreateRow(RowCreator creator) => new Bagaz();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("Nr");
				names.Append(divider); names.Append("Lot");
				names.Append(divider); names.Append("Maszyna");
				names.Append(divider); names.Append("Klient");
			}

		}

		public abstract partial class BagazRow : GuidedRow {

			private BagazRecord record;

			protected override void AssignRecord(Record rec) {
				record = (BagazRecord)rec;
			}

			protected BagazRow() : base(true) {
			}

			protected override Row PrimaryRow => null;

			[Category("Ogólne")]
			[MaxLength(20)]
			[Required]
			public string Nr {
				get {
					if (record==null) GetRecord();
					return record.Nr;
				}
				set {
					BagazSchema.NrBeforeEdit?.Invoke((Bagaz)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "Nr");
					if (value.Length>NrLength) throw new ValueToLongException(this, "Nr", NrLength);
					GetEdit(record==null, false);
					record.Nr = value;
					BagazSchema.NrAfterEdit?.Invoke((Bagaz)this);
				}
			}

			public const int NrLength = 20;

			[Caption("Lot widokowy")]
			[Required]
			public Lot Lot {
				get {
					if (record==null) GetRecord();
					return (Lot)GetRowReference(ref record.Lot);
				}
				set {
					BagazSchema.LotBeforeEdit?.Invoke((Bagaz)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Lot");
					record.Lot = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoBagazLot);
					}
					BagazSchema.LotAfterEdit?.Invoke((Bagaz)this);
				}
			}

			[Caption("Maszyna")]
			[Required]
			public Maszyna Maszyna {
				get {
					if (record==null) GetRecord();
					return (Maszyna)GetRowReference(ref record.Maszyna);
				}
				set {
					BagazSchema.MaszynaBeforeEdit?.Invoke((Bagaz)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Maszyna");
					record.Maszyna = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoBagazMaszyna);
					}
					BagazSchema.MaszynaAfterEdit?.Invoke((Bagaz)this);
				}
			}

			[Caption("Klient")]
			[Required]
			public Kontrahent Klient {
				get {
					if (record==null) GetRecord();
					return (Kontrahent)GetRowReference(ref record.Klient);
				}
				set {
					BagazSchema.KlientBeforeEdit?.Invoke((Bagaz)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Klient");
					record.Klient = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoBagazKlient);
					}
					BagazSchema.KlientAfterEdit?.Invoke((Bagaz)this);
				}
			}

			[Browsable(false)]
			public new Bagaze Table => (Bagaze)base.Table;

			[Browsable(false)]
			public DodatekDoSzkoleniaModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => BagazeTableInfo;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				BagazSchema.OnCalcObjectRight?.Invoke((Bagaz)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				BagazSchema.OnCalcParentsObjectRight?.Invoke((Bagaz)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				BagazSchema.OnCalcReadOnly?.Invoke((Bagaz)this, ref result);
				return result;
			}

			class NrRequiredVerifier : RequiredVerifier {
				internal NrRequiredVerifier(IRow row) : base(row, "Nr") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((BagazRow)Row).Nr));
			}

			class LotRequiredVerifier : RequiredVerifier {
				internal LotRequiredVerifier(IRow row) : base(row, "Lot") {
				}
				protected override bool IsValid() => ((BagazRow)Row).Lot!=null;
			}

			class MaszynaRequiredVerifier : RequiredVerifier {
				internal MaszynaRequiredVerifier(IRow row) : base(row, "Maszyna") {
				}
				protected override bool IsValid() => ((BagazRow)Row).Maszyna!=null;
			}

			class KlientRequiredVerifier : RequiredVerifier {
				internal KlientRequiredVerifier(IRow row) : base(row, "Klient") {
				}
				protected override bool IsValid() => ((BagazRow)Row).Klient!=null;
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new NrRequiredVerifier(this));
				Session.Verifiers.Add(new LotRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Lot==null || record.Lot.State==RowState.Detached || Session==record.Lot.Session);
				Session.Verifiers.Add(new MaszynaRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Maszyna==null || record.Maszyna.State==RowState.Detached || Session==record.Maszyna.Session);
				Session.Verifiers.Add(new KlientRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Klient==null || record.Klient.State==RowState.Detached || Session==record.Klient.Session);
				BagazSchema.OnAdded?.Invoke((Bagaz)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				BagazSchema.OnLoaded?.Invoke((Bagaz)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				BagazSchema.OnEditing?.Invoke((Bagaz)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				BagazSchema.OnDeleting?.Invoke((Bagaz)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				BagazSchema.OnDeleted?.Invoke((Bagaz)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				BagazSchema.OnRepacked?.Invoke((Bagaz)this);
			}

		}

		public sealed class BagazRecord : GuidedRecord {
			[Required]
			[MaxLength(20)]
			public string Nr = "";
			[Required]
			[ParentTable("Lot")]
			public IRow Lot;
			[Required]
			[ParentTable("Maszyna")]
			public IRow Maszyna;
			[Required]
			[ParentTable("Kontrahent")]
			public IRow Klient;

			public override Record Clone() {
				BagazRecord rec = (BagazRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				Nr = creator.Read_string();
				Lot = creator.Read_Row("Loty");
				Maszyna = creator.Read_Row("Maszyny");
				Klient = creator.Read_Row("Kontrahenci");
			}
		}

		public static class BagazSchema {

			internal static RowDelegate<BagazRow, string> NrBeforeEdit;
			public static void AddNrBeforeEdit(RowDelegate<BagazRow, string> value)
				=> NrBeforeEdit = (RowDelegate<BagazRow, string>)Delegate.Combine(NrBeforeEdit, value);

			internal static RowDelegate<BagazRow> NrAfterEdit;
			public static void AddNrAfterEdit(RowDelegate<BagazRow> value)
				=> NrAfterEdit = (RowDelegate<BagazRow>)Delegate.Combine(NrAfterEdit, value);

			internal static RowDelegate<BagazRow, Lot> LotBeforeEdit;
			public static void AddLotBeforeEdit(RowDelegate<BagazRow, Lot> value)
				=> LotBeforeEdit = (RowDelegate<BagazRow, Lot>)Delegate.Combine(LotBeforeEdit, value);

			internal static RowDelegate<BagazRow> LotAfterEdit;
			public static void AddLotAfterEdit(RowDelegate<BagazRow> value)
				=> LotAfterEdit = (RowDelegate<BagazRow>)Delegate.Combine(LotAfterEdit, value);

			internal static RowDelegate<BagazRow, Maszyna> MaszynaBeforeEdit;
			public static void AddMaszynaBeforeEdit(RowDelegate<BagazRow, Maszyna> value)
				=> MaszynaBeforeEdit = (RowDelegate<BagazRow, Maszyna>)Delegate.Combine(MaszynaBeforeEdit, value);

			internal static RowDelegate<BagazRow> MaszynaAfterEdit;
			public static void AddMaszynaAfterEdit(RowDelegate<BagazRow> value)
				=> MaszynaAfterEdit = (RowDelegate<BagazRow>)Delegate.Combine(MaszynaAfterEdit, value);

			internal static RowDelegate<BagazRow, Kontrahent> KlientBeforeEdit;
			public static void AddKlientBeforeEdit(RowDelegate<BagazRow, Kontrahent> value)
				=> KlientBeforeEdit = (RowDelegate<BagazRow, Kontrahent>)Delegate.Combine(KlientBeforeEdit, value);

			internal static RowDelegate<BagazRow> KlientAfterEdit;
			public static void AddKlientAfterEdit(RowDelegate<BagazRow> value)
				=> KlientAfterEdit = (RowDelegate<BagazRow>)Delegate.Combine(KlientAfterEdit, value);

			internal static RowDelegate<BagazRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<BagazRow> value)
				=> OnLoaded = (RowDelegate<BagazRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<BagazRow> OnAdded;
			public static void AddOnAdded(RowDelegate<BagazRow> value)
				=> OnAdded = (RowDelegate<BagazRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<BagazRow> OnEditing;
			public static void AddOnEditing(RowDelegate<BagazRow> value)
				=> OnEditing = (RowDelegate<BagazRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<BagazRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<BagazRow> value)
				=> OnDeleting = (RowDelegate<BagazRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<BagazRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<BagazRow> value)
				=> OnDeleted = (RowDelegate<BagazRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<BagazRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<BagazRow> value)
				=> OnRepacked = (RowDelegate<BagazRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<BagazRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<BagazRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<BagazRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<BagazRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<BagazRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<BagazRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<BagazRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<BagazRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<BagazRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

	}

	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public static class StaticsDodatekDoSzkoleniaModule {
		public static DodatekDoSzkoleniaModule GetDodatekDoSzkolenia(this Session session) => DodatekDoSzkoleniaModule.GetInstance(session);

		public static TResult Record<TResult>(this IRecordInvoker<Bagaz, TResult> row, Action<DodatekDoSzkoleniaModule.BagazRecord> action)
		    => row.InvokeAction(action, (rec, act) => ((Action<DodatekDoSzkoleniaModule.BagazRecord>)act)((DodatekDoSzkoleniaModule.BagazRecord)rec));
	}

}

